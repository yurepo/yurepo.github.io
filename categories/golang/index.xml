<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Coding 筆記</title>
    <link>https://yurepo.tw/categories/golang/</link>
    <description>Recent content in golang on Coding 筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 08 Aug 2021 23:53:41 +0800</lastBuildDate><atom:link href="https://yurepo.tw/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 1632</title>
      <link>https://yurepo.tw/2021/08/leetcode-1632/</link>
      <pubDate>Sun, 08 Aug 2021 23:53:41 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/08/leetcode-1632/</guid>
      <description>Rank Transform of a Matrix 最近在刷 LC 的時候，看到這題很有趣的題目，這題的其中一個解法使用了併查集(Disjoint-set data structure)，下面來回顧一下併查集的概念。
併查集 併查集用於處理一些不交集的合併與查詢問題，最常用的一種實現為不交集森林，其空間複雜度(SC)以及操作時間複雜度(TC)如下：
操作時間複雜度: $$ Time\hspace*{2mm}Complexity = O(\alpha(n)) $$
空間複雜度： $$ Space\hspace*{2mm}Complexity = O(n) $$
不交集森林 不交集森林把每個集合以樹狀表示，每個元素都儲存了回到父元素的值，根元素則儲存回到自身的值或是無效值。
使用不交集森林實現的併查集，每個集合的代表元素為根(Root)元素。
操作簡介  添加：將元素 查詢：找尋該元素所在的集合 合併：將兩個元素的集合合併在一起  </description>
    </item>
    
    <item>
      <title>Golang Redis Ratelimiter</title>
      <link>https://yurepo.tw/2021/03/golang-redis-ratelimiter/</link>
      <pubDate>Tue, 16 Mar 2021 02:12:14 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/03/golang-redis-ratelimiter/</guid>
      <description>令牌桶演算法實現 前言 這幾天將令牌桶限流演算法使用gin + redis實現了，今天主要要來講整個限流過程是如何運作的。
Github連結
主要定義了四個文件
   文件名 描述     dto.go 定義及宣告Ratelimiter的基本結構與核心Take()方法   err.go 定義了一些錯誤   ratelimiter.go 存放gin middleware中驗證的邏輯   script.go 存放 lua 腳本及 lua 腳本中輸入變數的結構    我們會將上次更新的時間與剩餘令牌的數量儲存在Redis中，而主要更新的邏輯會寫在script.go，這裡會發現整個操作Redis資料庫的邏輯是使用lua script去實作的，把多個操作Redis的指令包在lua script中，Redis會保證lua script中的多個操作會以Atomic的方式進行，這樣才可以保證每個操作之間不會有競爭情況(Race Condition)發生。 參考資料
程式碼部分 Golang 接下來就進入到程式碼的部分 首先我定義了 RedisRateLimiter 結構
dto.go
type RedisRateLimiter struct { context context.Context scriptSHA1 string client *redis.Client } 這邊將RedisRateLimiter的一些必須用到的變數包裝起來，包裝的變數型別包含了Redis客戶端、LUA Script SHA1(後續會使用evalsha調用已經讀進Redis腳本緩存的Lua script)、Goroutine context。
這個Repository實現的演算法是Token Bucket演算法，不過也可以利用上述定義的結構去實現不同算法，例如：Leaky Bucket。</description>
    </item>
    
  </channel>
</rss>
