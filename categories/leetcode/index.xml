<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on Coding 筆記</title>
    <link>https://yurepo.tw/categories/leetcode/</link>
    <description>Recent content in LeetCode on Coding 筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 08 Aug 2021 23:53:41 +0800</lastBuildDate><atom:link href="https://yurepo.tw/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode 1632</title>
      <link>https://yurepo.tw/2021/08/leetcode-1632/</link>
      <pubDate>Sun, 08 Aug 2021 23:53:41 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/08/leetcode-1632/</guid>
      <description>Rank Transform of a Matrix 最近在刷 LC 的時候，看到這題很有趣的題目，這題的其中一個解法使用了併查集(Disjoint-set data structure)，下面來回顧一下併查集的概念。
併查集 併查集用於處理一些不交集的合併與查詢問題，最常用的一種實現為不交集森林，其空間複雜度(SC)以及操作時間複雜度(TC)如下：
操作時間複雜度: $$ Time\hspace*{2mm}Complexity = O(\alpha(n)) $$
空間複雜度： $$ Space\hspace*{2mm}Complexity = O(n) $$
不交集森林 不交集森林把每個集合以樹狀表示，每個元素都儲存了回到父元素的值，根元素則儲存回到自身的值或是無效值。
使用不交集森林實現的併查集，每個集合的代表元素為根(Root)元素。
操作簡介  添加：將元素 查詢：找尋該元素所在的集合 合併：將兩個元素的集合合併在一起  </description>
    </item>
    
    <item>
      <title>Parsing A Boolean Expression</title>
      <link>https://yurepo.tw/2020/08/parsing-a-boolean-expression/</link>
      <pubDate>Mon, 03 Aug 2020 22:02:41 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/08/parsing-a-boolean-expression/</guid>
      <description>題目要求是要輸入一個運算式回傳該運算式的結果 有下列規則
 &amp;ldquo;t&amp;rdquo;，代表為 True &amp;ldquo;f&amp;rdquo;，代表為 False &amp;ldquo;!(expr)&amp;quot;，表示將expr得出的布林值反向 &amp;ldquo;&amp;amp;(expr1,expr2,&amp;hellip;)&amp;quot;，表示將所有expr{num}做AND &amp;ldquo;|(expr1,expr2,&amp;hellip;)&amp;quot;，表示將所有expr{num}做OR  馬上進入程式碼撰寫的部分，主要是以遞迴解決 我的想法應該算蠻差的，效能那些部分都不能強求，所以僅放上來做參考，歡迎底下討論
class Solution { companion object{ // 運算子列表  val operator = arrayOf(&amp;#39;!&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;|&amp;#39;) } fun parseBoolExpr(expression: String): Boolean { // 如果運算式為空，回傳 `False`  if (expression.isEmpty()) return false return expr(expression) } fun expr(expression: String): Boolean{ // 如果運算式的首個元素不包含於運算子列表(!、&amp;amp;、|)，回傳 `False`  if (!operator.contains(expression[0])) return false // 取得運算子  val mod = expression[0] // 檢查運算子後的下一個字元是否為 `(`  val optStart = if(expression[1] == &amp;#39;(&amp;#39;) 1 else throw RuntimeException(&amp;#34;not valid pattern&amp;#34;) // 檢查運算式的最後一個字源是否為 `)`  val optEnd = if(expression[expression.</description>
    </item>
    
  </channel>
</rss>
