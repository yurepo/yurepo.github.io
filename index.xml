<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding 筆記</title>
    <link>https://yurepo.tw/</link>
    <description>Recent content on Coding 筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yurepo.tw/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>淺談 Heap - 1. 介紹與實作</title>
      <link>https://yurepo.tw/2022/02/%E6%B7%BA%E8%AB%87-heap-1.-%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yurepo.tw/2022/02/%E6%B7%BA%E8%AB%87-heap-1.-%E4%BB%8B%E7%B4%B9%E8%88%87%E5%AF%A6%E4%BD%9C/</guid>
      <description>淺談 Heap 資料結構 前言 這個系列會紀錄我在 Leetcode 上複習的一些常見的東西。基本上會跟著探索卡的進度走。雖然這系列應該早就在課堂上學會了，但我就豆腐腦，雖然已經理解了，但是只要一過一段時間，記憶就這樣被回收了，我都懷疑我腦袋有一個GC回收器&amp;hellip;
優先佇列 (Priority Queue) 再講 Heap 之前，要先介紹一下優先佇列 Priority Queue：
既然優先佇列的名稱裡都有佇列了，那他肯定跟佇列有關係對吧？
優先佇列就像是普通的先進先出(FIFO)的佇列一樣，但是其每個元素都有優先權(Priority)這個變數，優先佇列的特點就是：優先權較高者的永遠會先被處理，如果對 Heap 有印象的人，看到現在應該知道為什麼要先介紹優先佇列了。
那要怎麼實現 Priority Queue 呢？
Priority Queue 就如同佇列一樣有兩個關鍵方法：push()、pull()
如果將元素存放在一個未排序列表中， 那push() 操作正常來說只需要O(1)就能完成，因為只是單純的將元素推到這個列表的最後端，範例如下：
func push(n *Node) { unsortedList = append(unsortedList, n) } 但是pull()操作呢？
正常來說需要O(n)時間，也就是需要遍歷完整個列表，範例如下：
func pull() *Node { if len(unsortedList) == 0 { return nil } maxIndex, highest := 0, unsortedList[0] for i := 1; i &amp;lt; len(unsortedList); i++ { if highest.Priority &amp;lt; unsortedList[i].Priority { highest = unsortedList[i] maxIndex = i } } // remove highest item  unsortedList = append(unsortedList[:maxIndex], unsortedList[maxIndex + 1:].</description>
    </item>
    
    <item>
      <title>臺中科大 110 學年度行事曆</title>
      <link>https://yurepo.tw/2021/07/%E8%87%BA%E4%B8%AD%E7%A7%91%E5%A4%A7-110-%E5%AD%B8%E5%B9%B4%E5%BA%A6%E8%A1%8C%E4%BA%8B%E6%9B%86/</link>
      <pubDate>Fri, 16 Jul 2021 18:07:52 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/07/%E8%87%BA%E4%B8%AD%E7%A7%91%E5%A4%A7-110-%E5%AD%B8%E5%B9%B4%E5%BA%A6%E8%A1%8C%E4%BA%8B%E6%9B%86/</guid>
      <description>臺中科大 110 學年度日間部行事曆 今天在校對生成的日曆時，看到110學年度下學期的日曆，不禁有一些感慨，就像是國中升高中，高中升大學，等到意識到要畢業了，才發現自己過去這幾年不知道都在幹啥。
大學生活裡，最後悔的是大一，許多時間都被浪費掉了，現在想想如果善用那些時間，或許可以把自己的程度提升更多。如果有剛入學的大一新生看到這篇文章的話，希望各位可以善用時間去提升自己的能力，不要像我一樣只會耍廢哈哈。
我想抱怨的話就到此結束了吧，時間也都回不去了。
行事曆 以下提供的行事曆都以臺中科大官網為主。
日曆的活動類型都為全天活動，建議設定通知時間
共用連結 110-1臺中科大日間部行事曆
110-2臺中科大日間部行事曆
公開網址 110-1臺中科大日間部行事曆
110-2臺中科大日間部行事曆
iCal 格式公開網址 110-1臺中科大日間部行事曆
110-2臺中科大日間部行事曆
Q&amp;amp;A 我想可能會有人問說：為什麼不開源給其他人自己生成?
這是因為每學年(甚至同一份文件)學校官網提供的pdf文件在格式上都會有一點差異，加上我懶，這份程式碼還停留在兩三年前的版本，不保證在未來一定能夠使用，所以不開源。
給有興趣的人參考，使用語言：Python3，需要安裝的套件：pdfplumber
結語 雖然前幾年都有生成這類型的日曆，但想說最後一年了就分享出來給需要的人，如果有幫助到你們的話，那我花費的時間也會讓我比較心安理得了😂</description>
    </item>
    
    <item>
      <title>Hugo 添加 Google Analytics 4 筆記</title>
      <link>https://yurepo.tw/2021/03/hugo-%E6%B7%BB%E5%8A%A0-google-analytics-4-%E7%AD%86%E8%A8%98/</link>
      <pubDate>Fri, 26 Mar 2021 23:35:19 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/03/hugo-%E6%B7%BB%E5%8A%A0-google-analytics-4-%E7%AD%86%E8%A8%98/</guid>
      <description>Hugo 添加 Google Analytics 4 筆記 前言 最近HUGO更新了0.82.0版本，此版本對比上一版本改進不大，對我來說，最有感的應該是增加了內置Google Analytics 4的支持，也就是可以使用G-開頭的評估ID而不是UA-開頭的追蹤ID，那首先就來回顧一下Universal Analytics(GA3)與Google Analytics 4。
GA4 x GA3 GA3 (Universal Analytics) UA於2012年10月發布，在上一代GA中，主要以網站會話(session)以及網站頁面為主，資料的來源主要從三個管道收集
 HTTP請求 瀏覽器/系統資訊 第一方Cookie  其中，我們最容易見到的是帶有utm開頭參數的連結，範例如下
http://example.com/?utm_source=active%20users&amp;amp;utm_medium=email&amp;amp;utm_campaign=feature...
這種分享連結後方都會添加一些utm開頭之參數，這個utm參數會記錄其來源、媒介、名稱，等到使用者造訪網站時，在網站上嵌入的UA會去收集這些參數並發送至Google Analytics，讓網站管理者檢視、分析成效。
上方的範例僅限於使用者是被哪個社群網站、哪個廣告以及從哪個來源(e.g. email、app)吸引而進入網站，那如何去收集使用者在網站內部的活動呢😶?
UA擁有許多不同匹配去收集使用者在網站內部的活動，這邊介紹最常見的三種：
  網頁瀏覽匹配
使用者載入嵌有UA的頁面時便會觸發此匹配，是最常觸發的操作。
  事件匹配
追蹤使用者在網站上特定元素的每次互動，例如：開啟的網址、播放的影片等。
  交易匹配
傳送電子商務購買的相關資料，例如：售出的產品、交易ID、庫存計量單位(SKU)等等。
  除上述三種之外也有許多其他匹配，像是社交匹配、網頁操作時間匹配等
GA4 (Google Analytics 4) GA4於2020年10月16日發布，在這一代GA中，主要採用以事件(event-based)的方式去收集資料，相較於上一代GA3，GA4提供了更彈性、更智慧、跨平台的數據蒐集方法。
GA4與GA3同樣都使用gtag.js向Google Analytics發送事件數據。
在以往的GA3，如果想要評估App端上的使用數據，必須使用Google Analytics for Firebase或是Google Analytics APP view建立不同的GA資源(Property)，想要結合網頁端及App端的使用數據相對來說是較不容易的。
GA4 整合了 Web 端及 APP 端的資料，並可以將其結合在一起進行分析，也可以單獨蒐集網站上的資料。
GA4默認提供了六種增強性評估
 網頁瀏覽 捲動 外連點擊 站內搜尋 影片參與 檔案下載  若要詳細了解GA4的功能及比較，可至【一表看懂】新版 GA4 與舊版 GA 差在哪裡？新舊版本功能比較懶人包！</description>
    </item>
    
    <item>
      <title>如何將Hugo部落格部署到Github上?</title>
      <link>https://yurepo.tw/2021/03/%E5%A6%82%E4%BD%95%E5%B0%87hugo%E9%83%A8%E8%90%BD%E6%A0%BC%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/</link>
      <pubDate>Sun, 21 Mar 2021 20:47:53 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/03/%E5%A6%82%E4%BD%95%E5%B0%87hugo%E9%83%A8%E8%90%BD%E6%A0%BC%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/</guid>
      <description>手把手教學: 將Hugo部落格佈署到Github上 前言 最近將以前的部落格從Hexo遷移到Hugo上了，不得不說Hugo在產生靜態頁面的速度比起Hexo來說快了很多，得益於Hexo跟Hugo都是使用Markdown文件的原因，在兩者之間進行遷移是非常容易的，今天就來為自己做個筆記，希望大家看了這篇文章後，沒有部落格的都可以嘗試建立一下自己的部落格。
教學開始 這邊安裝的Hugo版本為hugo v0.81.0，環境為Win10 20H2 x64，使用的工具為git與chocolatey，若是macOS，則可以使用Homebrew，Linux的部分則在這邊下載
第一步，安裝Hugo 這邊主要就照著官方的快速開始建立部落格，因為官方已經寫的足夠清楚了，所以在此處僅寫Windows版本的安裝過程
如果要安裝普通版本的Hugo，請使用以下指令
choco install hugo -confirm 如果要安裝Sass/SCSS版本的，請使用以下指令(有些主題會要求需要hugo-extended版本)
choco install hugo-extended -confirm 第二步，建立部落格 安裝完Hugo後，可以使用hugo version確認是否安裝成功。
安裝成功後，在你想要建立部落格的資料夾內打開powershell，並打以下指令即可建立。
hugo new site &amp;lt;資料夾名稱&amp;gt; 出現以下畫面就說明安裝成功了!
第三步，添加主題 接下來到官方的主題網站挑選您喜歡的主題，此範例使用ananke主題。
只需要打以下指令就可以新增主題了
cd &amp;lt;資料夾名稱&amp;gt; git init git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 接著修改config.toml文件，詳細的設定方式可以參照官網
# 基本設置 baseURL = &amp;#34;&amp;lt;網址&amp;gt;&amp;#34; title = &amp;#34;&amp;lt;標題&amp;gt;&amp;#34; languageCode = &amp;#34;en-us&amp;#34; # 主題設置 theme=&amp;#34;ananke&amp;#34; # 連結設置 [permalinks] posts = &amp;#34;/:year/:month/:title/&amp;#34; 第四步，建立第一篇貼文 接著輸入以下指令建立第一篇貼文
hugo new posts/hello-world.md 接著打開Markdown編輯工具(e.g. Visual Studio Code)，寫點簡單的文章並存檔。</description>
    </item>
    
    <item>
      <title>Golang Redis Ratelimiter</title>
      <link>https://yurepo.tw/2021/03/golang-redis-ratelimiter/</link>
      <pubDate>Tue, 16 Mar 2021 02:12:14 +0800</pubDate>
      
      <guid>https://yurepo.tw/2021/03/golang-redis-ratelimiter/</guid>
      <description>令牌桶演算法實現 前言 這幾天將令牌桶限流演算法使用gin + redis實現了，今天主要要來講整個限流過程是如何運作的。
Github連結
主要定義了四個文件
   文件名 描述     dto.go 定義及宣告Ratelimiter的基本結構與核心Take()方法   err.go 定義了一些錯誤   ratelimiter.go 存放gin middleware中驗證的邏輯   script.go 存放 lua 腳本及 lua 腳本中輸入變數的結構    我們會將上次更新的時間與剩餘令牌的數量儲存在Redis中，而主要更新的邏輯會寫在script.go，這裡會發現整個操作Redis資料庫的邏輯是使用lua script去實作的，把多個操作Redis的指令包在lua script中，Redis會保證lua script中的多個操作會以Atomic的方式進行，這樣才可以保證每個操作之間不會有競爭情況(Race Condition)發生。 參考資料
程式碼部分 Golang 接下來就進入到程式碼的部分 首先我定義了 RedisRateLimiter 結構
dto.go
type RedisRateLimiter struct { context context.Context scriptSHA1 string client *redis.Client } 這邊將RedisRateLimiter的一些必須用到的變數包裝起來，包裝的變數型別包含了Redis客戶端、LUA Script SHA1(後續會使用evalsha調用已經讀進Redis腳本緩存的Lua script)、Goroutine context。
這個Repository實現的演算法是Token Bucket演算法，不過也可以利用上述定義的結構去實現不同算法，例如：Leaky Bucket。</description>
    </item>
    
    <item>
      <title>Spring Security 02 - Security Context? 從哪來?</title>
      <link>https://yurepo.tw/2020/10/spring-security-02-security-context-%E5%BE%9E%E5%93%AA%E4%BE%86/</link>
      <pubDate>Thu, 08 Oct 2020 19:13:40 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/10/spring-security-02-security-context-%E5%BE%9E%E5%93%AA%E4%BE%86/</guid>
      <description>上回我們說了SecurityContextHolder主要在做什麼，這回主要討論的是，SecurityContext到底是何方神聖，它從何而來。
SecurityContext它作為 Spring Security 核心中的一部分，它的作用可說是非常重要的。我們來看看SecurityContext的源碼。
public interface SecurityContext extends Serializable { /** * 獲取當前已驗證的身分或驗證請求令牌 * * @return the &amp;lt;code&amp;gt;Authentication&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; if no authentication * information is available */ Authentication getAuthentication(); /** * 改變目前已驗證的身分或刪除驗證資料 * * @param authentication the new &amp;lt;code&amp;gt;Authentication&amp;lt;/code&amp;gt; token, or * &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; if no further authentication information should be stored */ void setAuthentication(Authentication authentication); } 可以看到SecurityContext主要是在管理Authentication的物件，那這個Authentication主要是存放當前使用者的身分(廢話)、存放是否已驗證以及取得目前使用者擁有的權限。
那 SecurityContext 從何而來呢? 同個包內的SecurityContextImpl就是它的實現，裡面都是很基本的邏輯，這次就不放了，可從官方GitHub找到相關源代碼。
那如何在不同request之間保存SecurityContext呢? 在Spring Security主要有兩個在不同request之間保存SecurityContext的策略，這邊簡單介紹一下，兩者都是ServerSecurityContextRepository的實現。
 NoOpServerSecurityContextRepository: 很廢，當你叫它保存的時候它不會理你，左耳進右耳出，然後你問他那個東西在哪，它會直接說&amp;quot;我不知道，你有跟我講過嗎?&amp;quot;，通常用於無狀態(Stateless)驗證，例如：httpBasic。 WebSessionServerSecurityContextRepository: 好學生，你叫它保存的時候，它會幫你做三件事，1.</description>
    </item>
    
    <item>
      <title>Spring Security 01 - 關於 ReactiveSecurityContextHolder 的一兩件事</title>
      <link>https://yurepo.tw/2020/10/spring-security-01-%E9%97%9C%E6%96%BC-reactivesecuritycontextholder-%E7%9A%84%E4%B8%80%E5%85%A9%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Tue, 06 Oct 2020 22:28:18 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/10/spring-security-01-%E9%97%9C%E6%96%BC-reactivesecuritycontextholder-%E7%9A%84%E4%B8%80%E5%85%A9%E4%BB%B6%E4%BA%8B/</guid>
      <description>Spring Security對於寫過Spring Boot的人應該是再熟悉不過了，這篇文主要紀錄我對於 ReactiveSecurityContextHolder的理解，原始碼版本為5.4.0-RC1。
在聊原始碼前，我想先聊一下Context到底是什麼。
Context，中文譯作「上下文」，我對於上下文的理解就是物件作用的環境。
打個比方，假設現在有一個物件叫做Weather，而假設Weather物件會有下雨、晴朗這兩種狀態，且EarthContext封裝其物件或者是強制其改變為某種狀態時，則可以說Weather的上下文是EarthContext。
對於Spring Security來說，SecurityContext就是整個Spring Security應用的上下文。
而SecurityContextHolder就是單純保存這個上下文而存在的。 在傳統Servlet應用SecurityContextHolder是存在多種保存上下文的策略，比方說GlobalSecurityContextHolderStrategy、InheritableThreadLocalSecurityContextHolderStrategy跟ThreadLocalSecurityContextHolderStrategy，但在ReactiveSecurityContextHolder中，並沒有多種策略去保存SecurityContext，唯一保存上下文的方法就是透過Reactor的上下文。
以下為個人部分翻譯的源碼：
public class ReactiveSecurityContextHolder { private static final Class&amp;lt;?&amp;gt; SECURITY_CONTEXT_KEY = SecurityContext.class; /** * 從 Reactor {@link Context} 取得 {@code Mono&amp;lt;SecurityContext&amp;gt;} * @return 回傳 {@code Mono&amp;lt;SecurityContext&amp;gt;} */ public static Mono&amp;lt;SecurityContext&amp;gt; getContext() { // 從Reactor的上下文中取得SecurityContext 	return Mono.subscriberContext() .filter( c -&amp;gt; c.hasKey(SECURITY_CONTEXT_KEY)) .flatMap( c-&amp;gt; c.&amp;lt;Mono&amp;lt;SecurityContext&amp;gt;&amp;gt;get(SECURITY_CONTEXT_KEY)); } /** * 從 Reactor {@link Context} 清除 {@code Mono&amp;lt;SecurityContext&amp;gt;} * @return 清除Reactor上下文，並回傳一個 Mono&amp;lt;Void&amp;gt;，若清除失敗，則報錯。 */ public static Function&amp;lt;Context, Context&amp;gt; clearContext() { // 從Reactor的上下文中刪除SecurityContext 	return context -&amp;gt; context.</description>
    </item>
    
    <item>
      <title>ヨルシカ - 花人局【翻譯】</title>
      <link>https://yurepo.tw/2020/08/%E3%83%A8%E3%83%AB%E3%82%B7%E3%82%AB-%E8%8A%B1%E4%BA%BA%E5%B1%80%E7%BF%BB%E8%AD%AF/</link>
      <pubDate>Thu, 13 Aug 2020 20:45:46 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/08/%E3%83%A8%E3%83%AB%E3%82%B7%E3%82%AB-%E8%8A%B1%E4%BA%BA%E5%B1%80%E7%BF%BB%E8%AD%AF/</guid>
      <description>歌曲連結[Youtube Music]
さよならを置いて僕に花もたせ 拋下一句再見就離開的妳為我留下了一朵花 覚束ぬままに夜が明けて 在沒有意識的情況下迎來了黎明 誰もいない部屋で起きた 於空無一人的房間裡醒來的我 その温もり一つ残して 身旁僅殘留一絲溫暖 昨日の夜のことは少しも覚えてないけれど 雖然一點也記不起來昨天晚上發生過的事情 他に誰かが居た、そんな気がただしている 也只是感覺昨晚似乎還有誰在的樣子 二日酔いが残る頭は回っちゃいないけれど 雖然腦袋還因為宿醉而無法好好運作 わからないままでもまぁ、それはそれでも綺麗だ 但是如果就這樣記不起來的話、也倒是有其美麗之處 洗面台の歯ブラシ、誰かのコップ、棚の化粧水 洗手台上的牙刷、不知道是誰的杯子、架子上的化妝水 覚えのない物ばかりだ 看到的盡是些沒有印象的物品 枕は花の匂いがする 枕頭上傳來了花的香味 さよならを置いて僕に花もたせ 拋下一句再見就離開的妳為我留下了一朵花 覚束ぬままに夜が明けて 在沒有意識的情況下迎來了黎明 誰もいない部屋で起きる 於空無一人的房間裡醒來的我 その温もり一つ残して 身旁僅殘留一絲溫暖 昨日の夜のことはそこまで覚えてないけれど 雖然記不清楚昨天晚上發生過的事情 美人局を疑う、そんな気もしないでいる 也懷疑過是一場仙人跳，但卻沒有那種感覺 二日酔いも醒めた頭で考えていたけど 儘管已經用宿醉過後的腦袋思考過了 わからないままでもいい 但卻覺得就這樣想不起來也不錯 むしろその方がいい 倒不如說這樣才是最好的 窓際咲くラベンダー、汚れたシンク、編み掛けのマフラー 窗邊盛開的薰衣草、骯髒的水槽、編織後掛著的圍巾 覚えのない事ばかりだ 想起來的淨是一些不記得的事情 部屋には春の匂いがする 房間裡飄散著春天的氣息 浮雲掴むような花人局 仿佛抓住浮雲一般的花人局 誰も来ないまま日が暮れて 等不到誰的回來，就這樣天色漸漸暗下 夕陽の差した窓一つ 只留下一扇照進夕陽餘暉的窗戶 何も知らない僕を残して 和一無所知的我 昨日の夜のことも本当は少し覚えてるんだ 昨天晚上發生過的事情其實還記得一些 貴方の居ない暮らし、それが続くことも 沒有了妳的生活、還是會繼續生活下去 今でもこの頭一つで考えているばかり 至今還是一股腦地去想著 花一つ持たせて消えた貴方のこと 留下一朵花後消逝的妳的事情 明日にはきっと戻ってくる 明天妳一定會回來的吧 何気ない顔で帰ってくる 一定會帶著若無其事的表情回來的吧 今にドアが開いて聞こえる 甚至現在把門打開好像就能聽到妳說 ごめんね、遅くなったって 「對不起、我遲到了」 言葉だけをずっと待っている 這樣的話語我一直在等待著 夕焼けをじっと待っている 靜靜地等待著晚霞 忘れてしまう前に花描け 在忘卻之前把花朵描繪出來吧 今日も一人また夜が来て 今日也是獨自迎來夜晚 誰もいない部屋で眠る 我能在空無一人的房間裡睡著 その温もり、僕に残して 是因為我還殘存著那份溫暖 馬鹿みたいに愛は花もたせ 把名譽拱手讓人的像笨蛋一樣的愛 この部屋にもまた春が来て 才能讓這個房間再次迎來春天 貴方のいない街を生きる 我能生活在沒有妳的街道上 その温もり、僕に残して 是因為我還殘存著那份溫暖 僕にひとつ、花を残して 給我留下一朵花的那份溫暖 言葉だけをずっと待っている 這樣的話語我一直在等待著 夕焼けをじっと待っている 靜靜地等待著晚霞 可供轉載，標明出處 </description>
    </item>
    
    <item>
      <title>回頭看當年技藝競賽題目</title>
      <link>https://yurepo.tw/2020/08/%E5%9B%9E%E9%A0%AD%E7%9C%8B%E7%95%B6%E5%B9%B4%E6%8A%80%E8%97%9D%E7%AB%B6%E8%B3%BD%E9%A1%8C%E7%9B%AE/</link>
      <pubDate>Wed, 05 Aug 2020 22:06:23 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/08/%E5%9B%9E%E9%A0%AD%E7%9C%8B%E7%95%B6%E5%B9%B4%E6%8A%80%E8%97%9D%E7%AB%B6%E8%B3%BD%E9%A1%8C%E7%9B%AE/</guid>
      <description>這幾天在準備上課教材，所以回頭做了一些技藝競賽的歷屆考題 我還記得以前有一題在我高中的時候花了將近幾天在想答案，回去重做發現&amp;hellip;&amp;hellip;
什麼鬼???不就只是遞迴而已&amp;hellip; 重寫後發現猜想真的是對的，可能當時練習的時候頭腦有點混亂吧，原本是寫了三、四個迴圈在裡面跑，有些數字還會直接當掉不給動只能說當時太笨了&amp;hellip; 希望回去學校教的時候學弟不要太聰明，不然當時的我會站不了檯面阿阿阿。 因為太丟人了程式碼就不放上來了。</description>
    </item>
    
    <item>
      <title>Parsing A Boolean Expression</title>
      <link>https://yurepo.tw/2020/08/parsing-a-boolean-expression/</link>
      <pubDate>Mon, 03 Aug 2020 22:02:41 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/08/parsing-a-boolean-expression/</guid>
      <description>題目要求是要輸入一個運算式回傳該運算式的結果 有下列規則
 &amp;ldquo;t&amp;rdquo;，代表為 True &amp;ldquo;f&amp;rdquo;，代表為 False &amp;ldquo;!(expr)&amp;quot;，表示將expr得出的布林值反向 &amp;ldquo;&amp;amp;(expr1,expr2,&amp;hellip;)&amp;quot;，表示將所有expr{num}做AND &amp;ldquo;|(expr1,expr2,&amp;hellip;)&amp;quot;，表示將所有expr{num}做OR  馬上進入程式碼撰寫的部分，主要是以遞迴解決 我的想法應該算蠻差的，效能那些部分都不能強求，所以僅放上來做參考，歡迎底下討論
class Solution { companion object{ // 運算子列表  val operator = arrayOf(&amp;#39;!&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;|&amp;#39;) } fun parseBoolExpr(expression: String): Boolean { // 如果運算式為空，回傳 `False`  if (expression.isEmpty()) return false return expr(expression) } fun expr(expression: String): Boolean{ // 如果運算式的首個元素不包含於運算子列表(!、&amp;amp;、|)，回傳 `False`  if (!operator.contains(expression[0])) return false // 取得運算子  val mod = expression[0] // 檢查運算子後的下一個字元是否為 `(`  val optStart = if(expression[1] == &amp;#39;(&amp;#39;) 1 else throw RuntimeException(&amp;#34;not valid pattern&amp;#34;) // 檢查運算式的最後一個字源是否為 `)`  val optEnd = if(expression[expression.</description>
    </item>
    
    <item>
      <title>HelloWorld | JVM</title>
      <link>https://yurepo.tw/2020/08/helloworld-jvm/</link>
      <pubDate>Sat, 01 Aug 2020 00:43:58 +0000</pubDate>
      
      <guid>https://yurepo.tw/2020/08/helloworld-jvm/</guid>
      <description>HelloWorld | JVM 因為是部落格上的第一篇，所以想來測試基本語法高亮 首先是Java
// 測試Java註解 public static void main(string[] args){ System.out.println(&amp;#34;hello world&amp;#34;); } 接下來是Kotlin
fun main(){ &amp;#34;hello world&amp;#34;.println() } fun String.println(){ println(this) } 最後基本的C語言好了
int main(){ printf(&amp;#34;hello world&amp;#34;); return 0; } </description>
    </item>
    
    <item>
      <title>搜尋</title>
      <link>https://yurepo.tw/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yurepo.tw/search/</guid>
      <description>search</description>
    </item>
    
  </channel>
</rss>
